// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'dbObject.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Json_from_uri.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Json_from_uri TABLE
class TableJson_from_uri extends SqfEntityTableBase {
  TableJson_from_uri() {
    // declare properties of EntityTable
    tableName = 'json_from_uri';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('author', DbType.text, isNotNull: false),
      SqfEntityFieldBase('width', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('height', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('url', DbType.text, isNotNull: false),
      SqfEntityFieldBase('download_url', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableJson_from_uri();
  }
}

// TempTable TABLE
class TableTempTable extends SqfEntityTableBase {
  TableTempTable() {
    // declare properties of EntityTable
    tableName = 'tempTable';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: false),
      SqfEntityFieldBase('surname', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTempTable();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class AppDB extends SqfEntityModelProvider {
  AppDB() {
    databaseName = appDB.databaseName;
    password = appDB.password;
    dbVersion = appDB.dbVersion;
    databaseTables = [
      TableJson_from_uri.getInstance,
      TableTempTable.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = appDB
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Json_from_uri
class Json_from_uri {
  Json_from_uri(
      {this.id,
      this.author,
      this.width,
      this.height,
      this.url,
      this.download_url}) {
    _setDefaultValues();
  }
  Json_from_uri.withFields(
      this.author, this.width, this.height, this.url, this.download_url) {
    _setDefaultValues();
  }
  Json_from_uri.withId(this.id, this.author, this.width, this.height, this.url,
      this.download_url) {
    _setDefaultValues();
  }
  Json_from_uri.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['author'] != null) {
      author = o['author'] as String;
    }
    if (o['width'] != null) {
      width = int.tryParse(o['width'].toString());
    }
    if (o['height'] != null) {
      height = int.tryParse(o['height'].toString());
    }
    if (o['url'] != null) {
      url = o['url'] as String;
    }
    if (o['download_url'] != null) {
      download_url = o['download_url'] as String;
    }
  }
  // FIELDS (Json_from_uri)
  int id;
  String author;
  int width;
  int height;
  String url;
  String download_url;

  BoolResult saveResult;
  // end FIELDS (Json_from_uri)

  static const bool _softDeleteActivated = false;
  Json_from_uriManager __mnJson_from_uri;

  Json_from_uriManager get _mnJson_from_uri {
    return __mnJson_from_uri = __mnJson_from_uri ?? Json_from_uriManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (author != null) {
      map['author'] = author;
    }

    if (width != null) {
      map['width'] = width;
    }

    if (height != null) {
      map['height'] = height;
    }

    if (url != null) {
      map['url'] = url;
    }

    if (download_url != null) {
      map['download_url'] = download_url;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (author != null) {
      map['author'] = author;
    }

    if (width != null) {
      map['width'] = width;
    }

    if (height != null) {
      map['height'] = height;
    }

    if (url != null) {
      map['url'] = url;
    }

    if (download_url != null) {
      map['download_url'] = download_url;
    }

    return map;
  }

  /// This method returns Json String [Json_from_uri]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Json_from_uri]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [author, width, height, url, download_url];
  }

  List<dynamic> toArgsWithIds() {
    return [id, author, width, height, url, download_url];
  }

  static Future<List<Json_from_uri>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Json_from_uri.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Json_from_uri>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Json_from_uri>[];
    try {
      objList = list
          .map((json_from_uri) =>
              Json_from_uri.fromMap(json_from_uri as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR Json_from_uri.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Json_from_uri>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Json_from_uri> objList = <Json_from_uri>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Json_from_uri.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Json_from_uri by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Json_from_uri if exist, otherwise returns null
  Future<Json_from_uri> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Json_from_uri obj;
    final data = await _mnJson_from_uri.getById([id]);
    if (data.length != 0) {
      obj = Json_from_uri.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Json_from_uri) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnJson_from_uri.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnJson_from_uri.update(this);
    }

    return id;
  }

  /// saveAs Json_from_uri. Returns a new Primary Key value of Json_from_uri

  /// <returns>Returns a new Primary Key value of Json_from_uri
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Json_from_uri> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Json_from_uri> json_from_uris) async {
    // final results = _mnJson_from_uri.saveAll('INSERT OR REPLACE INTO json_from_uri (id,author, width, height, url, download_url)  VALUES (?,?,?,?,?,?)',json_from_uris);
    // return results; removed in sqfentity_gen 1.3.0+6
    await AppDB().batchStart();
    for (final obj in json_from_uris) {
      await obj.save();
    }
    //    return AppDB().batchCommit();
    final result = await AppDB().batchCommit();
    for (int i = 0; i < json_from_uris.length; i++) {
      if (json_from_uris[i].id == null) {
        json_from_uris[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnJson_from_uri.rawInsert(
              'INSERT OR REPLACE INTO json_from_uri (id,author, width, height, url, download_url)  VALUES (?,?,?,?,?,?)',
              [id, author, width, height, url, download_url]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Json_from_uri id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Json_from_uri id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Json_from_uri Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Json_from_uri>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Json_from_uri> json_from_uris) async {
    final results = await _mnJson_from_uri.rawInsertAll(
        'INSERT OR REPLACE INTO json_from_uri (id,author, width, height, url, download_url)  VALUES (?,?,?,?,?,?)',
        json_from_uris);
    return results;
  }

  /// Deletes Json_from_uri

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Json_from_uri invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnJson_from_uri
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnJson_from_uri.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  Json_from_uriFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Json_from_uriFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  Json_from_uriFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Json_from_uriFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion json_from_uri

// region Json_from_uriField
class Json_from_uriField extends SearchCriteria {
  Json_from_uriField(this.json_from_uriFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  Json_from_uriFilterBuilder json_from_uriFB;

  Json_from_uriField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  Json_from_uriFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    json_from_uriFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.EQuals, json_from_uriFB._addedBlocks)
        : setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.NotEQuals, json_from_uriFB._addedBlocks);
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    json_from_uriFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.EQualsOrNull, json_from_uriFB._addedBlocks)
        : setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, json_from_uriFB._addedBlocks);
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder isNull() {
    json_from_uriFB._addedBlocks = setCriteria(
        0,
        json_from_uriFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        json_from_uriFB._addedBlocks);
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      json_from_uriFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          json_from_uriFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          json_from_uriFB._addedBlocks);
      _waitingNot = '';
      json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
          json_from_uriFB._addedBlocks.retVal;
    }
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      json_from_uriFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          json_from_uriFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          json_from_uriFB._addedBlocks);
      _waitingNot = '';
      json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
          json_from_uriFB._addedBlocks.retVal;
      json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
          json_from_uriFB._addedBlocks.retVal;
    }
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      json_from_uriFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          json_from_uriFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          json_from_uriFB._addedBlocks);
      _waitingNot = '';
      json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
          json_from_uriFB._addedBlocks.retVal;
    }
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      json_from_uriFB._addedBlocks = setCriteria(
          pFirst,
          json_from_uriFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          json_from_uriFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        json_from_uriFB._addedBlocks = setCriteria(
            pFirst,
            json_from_uriFB.parameters,
            param,
            SqlSyntax.LessThan,
            json_from_uriFB._addedBlocks);
      } else {
        json_from_uriFB._addedBlocks = setCriteria(
            pFirst,
            json_from_uriFB.parameters,
            param,
            SqlSyntax.GreaterThanOrEquals,
            json_from_uriFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        json_from_uriFB._addedBlocks = setCriteria(
            pLast,
            json_from_uriFB.parameters,
            param,
            SqlSyntax.GreaterThan,
            json_from_uriFB._addedBlocks);
      } else {
        json_from_uriFB._addedBlocks = setCriteria(
            pLast,
            json_from_uriFB.parameters,
            param,
            SqlSyntax.LessThanOrEquals,
            json_from_uriFB._addedBlocks);
      }
    }
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    json_from_uriFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.GreaterThan, json_from_uriFB._addedBlocks)
        : setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.LessThanOrEquals, json_from_uriFB._addedBlocks);
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    json_from_uriFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.LessThan, json_from_uriFB._addedBlocks)
        : setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, json_from_uriFB._addedBlocks);
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    json_from_uriFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, json_from_uriFB._addedBlocks)
        : setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.LessThan, json_from_uriFB._addedBlocks);
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    json_from_uriFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.LessThanOrEquals, json_from_uriFB._addedBlocks)
        : setCriteria(pValue, json_from_uriFB.parameters, param,
            SqlSyntax.GreaterThan, json_from_uriFB._addedBlocks);
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }

  Json_from_uriFilterBuilder inValues(dynamic pValue) {
    json_from_uriFB._addedBlocks = setCriteria(
        pValue,
        json_from_uriFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        json_from_uriFB._addedBlocks);
    _waitingNot = '';
    json_from_uriFB._addedBlocks.needEndBlock[json_from_uriFB._blockIndex] =
        json_from_uriFB._addedBlocks.retVal;
    return json_from_uriFB;
  }
}
// endregion Json_from_uriField

// region Json_from_uriFilterBuilder
class Json_from_uriFilterBuilder extends SearchCriteria {
  Json_from_uriFilterBuilder(Json_from_uri obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Json_from_uri _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  Json_from_uriFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  Json_from_uriFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  Json_from_uriFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  Json_from_uriFilterBuilder where(String whereCriteria,
      {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  Json_from_uriFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  Json_from_uriFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  Json_from_uriFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Json_from_uriFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Json_from_uriFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  Json_from_uriFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  Json_from_uriFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  Json_from_uriField setField(
      Json_from_uriField field, String colName, DbType dbtype) {
    return Json_from_uriField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  Json_from_uriField _id;
  Json_from_uriField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  Json_from_uriField _author;
  Json_from_uriField get author {
    return _author = setField(_author, 'author', DbType.text);
  }

  Json_from_uriField _width;
  Json_from_uriField get width {
    return _width = setField(_width, 'width', DbType.integer);
  }

  Json_from_uriField _height;
  Json_from_uriField get height {
    return _height = setField(_height, 'height', DbType.integer);
  }

  Json_from_uriField _url;
  Json_from_uriField get url {
    return _url = setField(_url, 'url', DbType.text);
  }

  Json_from_uriField _download_url;
  Json_from_uriField get download_url {
    return _download_url = setField(_download_url, 'download_url', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Json_from_uri._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Json_from_uri> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Json_from_uri._softDeleteActivated && !hardDelete) {
      r = await _obj._mnJson_from_uri.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnJson_from_uri.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from json_from_uri ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnJson_from_uri.updateBatch(qparams, values);
  }

  /// This method always returns Json_from_uri Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Json_from_uri>
  Future<Json_from_uri> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnJson_from_uri.toList(qparams);
    final data = await objFuture;
    Json_from_uri obj;
    if (data.isNotEmpty) {
      obj = Json_from_uri.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Json_from_uri]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) json_from_uriCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final json_from_urisFuture = await _obj._mnJson_from_uri.toList(qparams);
    final int count = json_from_urisFuture[0]['CNT'] as int;
    if (json_from_uriCount != null) {
      json_from_uriCount(count);
    }
    return count;
  }

  /// This method returns List<Json_from_uri> [Json_from_uri]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Json_from_uri>
  Future<List<Json_from_uri>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Json_from_uri> json_from_urisData =
        await Json_from_uri.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return json_from_urisData;
  }

  /// This method returns Json String [Json_from_uri]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Json_from_uri]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Json_from_uri]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnJson_from_uri.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Json_from_uri]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM json_from_uri WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnJson_from_uri.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Json_from_uri]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnJson_from_uri.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Json_from_uri.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnJson_from_uri.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Json_from_uriFilterBuilder

// region Json_from_uriFields
class Json_from_uriFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fAuthor;
  static TableField get author {
    return _fAuthor =
        _fAuthor ?? SqlSyntax.setField(_fAuthor, 'author', DbType.text);
  }

  static TableField _fWidth;
  static TableField get width {
    return _fWidth =
        _fWidth ?? SqlSyntax.setField(_fWidth, 'width', DbType.integer);
  }

  static TableField _fHeight;
  static TableField get height {
    return _fHeight =
        _fHeight ?? SqlSyntax.setField(_fHeight, 'height', DbType.integer);
  }

  static TableField _fUrl;
  static TableField get url {
    return _fUrl = _fUrl ?? SqlSyntax.setField(_fUrl, 'url', DbType.text);
  }

  static TableField _fDownload_url;
  static TableField get download_url {
    return _fDownload_url = _fDownload_url ??
        SqlSyntax.setField(_fDownload_url, 'download_url', DbType.text);
  }
}
// endregion Json_from_uriFields

//region Json_from_uriManager
class Json_from_uriManager extends SqfEntityProvider {
  Json_from_uriManager()
      : super(AppDB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'json_from_uri';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion Json_from_uriManager
// region TempTable
class TempTable {
  TempTable({this.id, this.name, this.surname, this.isDeleted}) {
    _setDefaultValues();
  }
  TempTable.withFields(this.name, this.surname, this.isDeleted) {
    _setDefaultValues();
  }
  TempTable.withId(this.id, this.name, this.surname, this.isDeleted) {
    _setDefaultValues();
  }
  TempTable.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'] as String;
    }
    if (o['surname'] != null) {
      surname = o['surname'] as String;
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (TempTable)
  int id;
  String name;
  String surname;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (TempTable)

  static const bool _softDeleteActivated = true;
  TempTableManager __mnTempTable;

  TempTableManager get _mnTempTable {
    return __mnTempTable = __mnTempTable ?? TempTableManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (surname != null) {
      map['surname'] = surname;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (surname != null) {
      map['surname'] = surname;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [TempTable]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [TempTable]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [name, surname, isDeleted];
  }

  List<dynamic> toArgsWithIds() {
    return [id, name, surname, isDeleted];
  }

  static Future<List<TempTable>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR TempTable.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<TempTable>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <TempTable>[];
    try {
      objList = list
          .map((temptable) =>
              TempTable.fromMap(temptable as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print(
          'SQFENTITY ERROR TempTable.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<TempTable>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<TempTable> objList = <TempTable>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = TempTable.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns TempTable by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns TempTable if exist, otherwise returns null
  Future<TempTable> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    TempTable obj;
    final data = await _mnTempTable.getById([id]);
    if (data.length != 0) {
      obj = TempTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (TempTable) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnTempTable.insert(this);
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTempTable.update(this);
    }

    return id;
  }

  /// saveAs TempTable. Returns a new Primary Key value of TempTable

  /// <returns>Returns a new Primary Key value of TempTable
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<TempTable> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<TempTable> temptables) async {
    // final results = _mnTempTable.saveAll('INSERT OR REPLACE INTO tempTable (id,name, surname,isDeleted)  VALUES (?,?,?,?)',temptables);
    // return results; removed in sqfentity_gen 1.3.0+6
    await AppDB().batchStart();
    for (final obj in temptables) {
      await obj.save();
    }
    //    return AppDB().batchCommit();
    final result = await AppDB().batchCommit();
    for (int i = 0; i < temptables.length; i++) {
      if (temptables[i].id == null) {
        temptables[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnTempTable.rawInsert(
              'INSERT OR REPLACE INTO tempTable (id,name, surname,isDeleted)  VALUES (?,?,?,?)',
              [id, name, surname, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'TempTable id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'TempTable id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'TempTable Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<TempTable>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<TempTable> temptables) async {
    final results = await _mnTempTable.rawInsertAll(
        'INSERT OR REPLACE INTO tempTable (id,name, surname,isDeleted)  VALUES (?,?,?,?)',
        temptables);
    return results;
  }

  /// Deletes TempTable

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete TempTable invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnTempTable
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTempTable.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover TempTable>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover TempTable invoked (id=$id)');
    {
      return _mnTempTable.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  TempTableFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TempTableFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  TempTableFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return TempTableFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion temptable

// region TempTableField
class TempTableField extends SearchCriteria {
  TempTableField(this.temptableFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  TempTableFilterBuilder temptableFB;

  TempTableField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  TempTableFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    temptableFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, temptableFB.parameters, param, SqlSyntax.EQuals,
            temptableFB._addedBlocks)
        : setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.NotEQuals, temptableFB._addedBlocks);
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }

  TempTableFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    temptableFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.EQualsOrNull, temptableFB._addedBlocks)
        : setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, temptableFB._addedBlocks);
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }

  TempTableFilterBuilder isNull() {
    temptableFB._addedBlocks = setCriteria(
        0,
        temptableFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        temptableFB._addedBlocks);
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }

  TempTableFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      temptableFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          temptableFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          temptableFB._addedBlocks);
      _waitingNot = '';
      temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
          temptableFB._addedBlocks.retVal;
    }
    return temptableFB;
  }

  TempTableFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      temptableFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          temptableFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          temptableFB._addedBlocks);
      _waitingNot = '';
      temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
          temptableFB._addedBlocks.retVal;
      temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
          temptableFB._addedBlocks.retVal;
    }
    return temptableFB;
  }

  TempTableFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      temptableFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          temptableFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          temptableFB._addedBlocks);
      _waitingNot = '';
      temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
          temptableFB._addedBlocks.retVal;
    }
    return temptableFB;
  }

  TempTableFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      temptableFB._addedBlocks = setCriteria(
          pFirst,
          temptableFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          temptableFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        temptableFB._addedBlocks = setCriteria(pFirst, temptableFB.parameters,
            param, SqlSyntax.LessThan, temptableFB._addedBlocks);
      } else {
        temptableFB._addedBlocks = setCriteria(pFirst, temptableFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, temptableFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        temptableFB._addedBlocks = setCriteria(pLast, temptableFB.parameters,
            param, SqlSyntax.GreaterThan, temptableFB._addedBlocks);
      } else {
        temptableFB._addedBlocks = setCriteria(pLast, temptableFB.parameters,
            param, SqlSyntax.LessThanOrEquals, temptableFB._addedBlocks);
      }
    }
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }

  TempTableFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    temptableFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.GreaterThan, temptableFB._addedBlocks)
        : setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.LessThanOrEquals, temptableFB._addedBlocks);
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }

  TempTableFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    temptableFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, temptableFB.parameters, param, SqlSyntax.LessThan,
            temptableFB._addedBlocks)
        : setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, temptableFB._addedBlocks);
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }

  TempTableFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    temptableFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, temptableFB._addedBlocks)
        : setCriteria(pValue, temptableFB.parameters, param, SqlSyntax.LessThan,
            temptableFB._addedBlocks);
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }

  TempTableFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    temptableFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.LessThanOrEquals, temptableFB._addedBlocks)
        : setCriteria(pValue, temptableFB.parameters, param,
            SqlSyntax.GreaterThan, temptableFB._addedBlocks);
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }

  TempTableFilterBuilder inValues(dynamic pValue) {
    temptableFB._addedBlocks = setCriteria(
        pValue,
        temptableFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        temptableFB._addedBlocks);
    _waitingNot = '';
    temptableFB._addedBlocks.needEndBlock[temptableFB._blockIndex] =
        temptableFB._addedBlocks.retVal;
    return temptableFB;
  }
}
// endregion TempTableField

// region TempTableFilterBuilder
class TempTableFilterBuilder extends SearchCriteria {
  TempTableFilterBuilder(TempTable obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  TempTable _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  TempTableFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  TempTableFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  TempTableFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  TempTableFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  TempTableFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  TempTableFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  TempTableFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TempTableFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TempTableFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  TempTableFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  TempTableFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  TempTableField setField(TempTableField field, String colName, DbType dbtype) {
    return TempTableField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  TempTableField _id;
  TempTableField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  TempTableField _name;
  TempTableField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  TempTableField _surname;
  TempTableField get surname {
    return _surname = setField(_surname, 'surname', DbType.text);
  }

  TempTableField _isDeleted;
  TempTableField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (TempTable._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<TempTable> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (TempTable._softDeleteActivated && !hardDelete) {
      r = await _obj._mnTempTable.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnTempTable.delete(qparams);
    }
    return r;
  }

  /// Recover List<TempTable> bulk by query
  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover TempTable bulk invoked');
    return _obj._mnTempTable.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from tempTable ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnTempTable.updateBatch(qparams, values);
  }

  /// This method always returns TempTable Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<TempTable>
  Future<TempTable> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnTempTable.toList(qparams);
    final data = await objFuture;
    TempTable obj;
    if (data.isNotEmpty) {
      obj = TempTable.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [TempTable]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) temptableCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final temptablesFuture = await _obj._mnTempTable.toList(qparams);
    final int count = temptablesFuture[0]['CNT'] as int;
    if (temptableCount != null) {
      temptableCount(count);
    }
    return count;
  }

  /// This method returns List<TempTable> [TempTable]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<TempTable>
  Future<List<TempTable>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<TempTable> temptablesData = await TempTable.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return temptablesData;
  }

  /// This method returns Json String [TempTable]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [TempTable]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [TempTable]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnTempTable.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [TempTable]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM tempTable WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnTempTable.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [TempTable]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnTempTable.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await TempTable.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnTempTable.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TempTableFilterBuilder

// region TempTableFields
class TempTableFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fSurname;
  static TableField get surname {
    return _fSurname =
        _fSurname ?? SqlSyntax.setField(_fSurname, 'surname', DbType.text);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TempTableFields

//region TempTableManager
class TempTableManager extends SqfEntityProvider {
  TempTableManager()
      : super(AppDB(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'tempTable';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion TempTableManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o) nextval]) async {
    final val = await AppDBSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o) currentval]) async {
    final val = await AppDBSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o) currentval]) async {
    final val = await AppDBSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class AppDBSequenceManager extends SqfEntityProvider {
  AppDBSequenceManager() : super(AppDB());
}
// END OF ENTITIES
